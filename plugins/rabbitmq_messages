#!/usr/bin/perl
# -*- cperl -*-

=encoding utf8

=head1 NAME

rabbitmq_messages - Munin plugin to monitor RabbitMQ messagess.

=head1 CONFIGURATION

FIXME

=head1 MAGIC MARKERS

  #%# family=auto
  #  #%# capabilities=autoconf

=head1 AUTHOR

Written by Michael Jeanson <michael.jeanson@isvtec.com> based upon
nagios-plugins-rabbitmq by James Casey <jamesc.000@gmail.com>.

=head1 LICENSE

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=cut

use strict;
use warnings;
use Munin::Plugin;

my $ret = undef;

if (! eval "require LWP::UserAgent;") {
  $ret = "LWP::UserAgent not found";
  if ( ! defined $ARGV[0] ) {
    die $ret;
  }
}

if (! eval "require URI::Escape;") {
  $ret = "URI::Escape not found";
  if ( ! defined $ARGV[0] ) {
    die $ret;
  }
}

if (! eval "require JSON;") {
  $ret = "JSON not found";
  if ( ! defined $ARGV[0] ) {
    die $ret;
  }
} else {
  use JSON;
}


# Autoconf
if ( defined $ARGV[0] and $ARGV[0] eq "autoconf" ) {
  if ($ret) {
    print "no ($ret)\n";
    exit 0;
  }

  #FIXME: Add autoconf
  print "no\n";
  exit 0;
}

# Config
if ( defined $ARGV[0] and $ARGV[0] eq "config" ) {
  print <<END;
graph_title RabbitMQ messagess
graph_args --base 1000 -l 0
graph_vlabel messages
graph_category rabbitmq

ack.label ack
ack.type DERIVE
ack.min 0

deliver.label deliver
deliver.type DERIVE
deliver.min 0

deliver_get.label deliver_get
deliver_get.type DERIVE
deliver_get.min 0

deliver_no_ack.label deliver_no_ack
deliver_no_ack.type DERIVE
deliver_no_ack.min 0

get_no_ack.label get_no_ack
get_no_ack.type DERIVE
get_no_ack.min 0

publish.label publish
publish.type DERIVE
publish.min 0

END

    exit 0;
}


my $hostname = exists $ENV{hostname}  ? $ENV{hostname} : 'localhost';

my $username = exists $ENV{username}  ? $ENV{username} : 'guest';
my $password = exists $ENV{password}  ? $ENV{password} : 'guest';

my $port = exists $ENV{port}  ? $ENV{port} : '15672';
my $ssl = exists $ENV{ssl}  ? $ENV{ssl} : 0;
my $proxy = exists $ENV{proxy}  ? $ENV{proxy} : '';
my $timeout = exists $ENV{timeout}  ? $ENV{timeout} : '10';


my $PROGNAME = "rabbitmq_node";

my $ua = LWP::UserAgent->new(env_proxy => $proxy);
$ua->agent($PROGNAME.' ');
$ua->timeout($timeout);
$ua->credentials("$hostname:$port",
    "RabbitMQ Management", $username, $password);
my $url = sprintf("http%s://%s:%d/api/overview", ($ssl ? "s" : ""), $hostname, $port);
my ($retcode, $result) = request($url);
if ($retcode != 200) {
    die "$result : $url";
}

print "ack.value ".$result->{'message_stats'}->{'ack'}."\n";
print "deliver.value ".$result->{'message_stats'}->{'deliver'}."\n";
print "deliver_get.value ".$result->{'message_stats'}->{'deliver_get'}."\n";
print "deliver_no_ack.value ".$result->{'message_stats'}->{'deliver_no_ack'}."\n";
print "get_no_ack.value ".$result->{'message_stats'}->{'get_no_ack'}."\n";
print "publish.value ".$result->{'message_stats'}->{'publish'}."\n";

exit 0;

sub request {
    my ($url) = @_;
    my $req = HTTP::Request->new(GET => $url);
    my $res = $ua->request($req);

    if (!$res->is_success) {
        # Deal with standard error conditions - make the messages more sensible
        if ($res->code == 400) {
            my $bodyref = decode_json $res->content;
            return (400, $bodyref->{'reason'});

        }
        $res->code == 404 and return (404, "Not Found");
        $res->code == 401 and return (401, "Access Refused");
        $res->status_line =~ /Can\'t connect/ and return (500, "Connection Refused : $url");
        if ($res->code < 200 or $res->code > 400 ) {
            return ($res->code, "Received ".$res->status_line);
        }
    }
    my $bodyref = decode_json $res->content;
    return($res->code, $bodyref);
}
